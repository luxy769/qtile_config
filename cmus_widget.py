from libqtile import widget
import subprocess

class CmusWidget(widget.TextBox):
    def __init__(self, **config):
        super().__init__(**config)
        self.add_callbacks({
            'Button1': self.next_track,  # –õ–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞
        })
        self.update_cmus()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–∂–µ—Ç–∞
        self.timeout_add(1, self.update_cmus)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 1 —Å–µ–∫—É–Ω–¥—É

    def next_track(self):
        subprocess.run(["cmus-remote", "-n"])  # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫
        self.update_cmus()  # –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Ç—Ä–µ–∫–µ

    def update_cmus(self):
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫
            current_track = subprocess.check_output(["cmus-remote", "-Q"]).decode('utf-8')
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞
            for line in current_track.splitlines():
                if line.startswith("tag title"):
                    title = line.split(" ", 2)[2]
                    self.text = f"üéµ {title}"  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞
                    break
        except Exception as e:
            self.text = "cmus –Ω–µ –∑–∞–ø—É—â–µ–Ω"  # –ï—Å–ª–∏ cmus –Ω–µ –∑–∞–ø—É—â–µ–Ω

# –í –≤–∞—à–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ Qtile –¥–æ–±–∞–≤—å—Ç–µ –≤–∏–¥–∂–µ—Ç
screens = [
    Screen(
        top=bar.Bar(
            [
                CmusWidget(),
                # –î—Ä—É–≥–∏–µ –≤–∏–¥–∂–µ—Ç—ã...
            ],
            24,
        ),
    ),
]
